version: '3.8'

# 完整的Web应用技术栈
# 包含：Nginx反向代理 + Node.js应用 + MySQL数据库 + Redis缓存

services:
  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: webapp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - webapp
    networks:
      - webapp-network

  # Node.js Web应用
  webapp:
    image: node:16-alpine
    container_name: webapp-node
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./app:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=webapp
      - DB_USER=webapp_user
      - DB_PASSWORD=webapp_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    command: ["npm", "start"]
    depends_on:
      - mysql
      - redis
    networks:
      - webapp-network

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: webapp-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=webapp
      - MYSQL_USER=webapp_user
      - MYSQL_PASSWORD=webapp_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - webapp-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: webapp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - webapp-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: webapp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - webapp-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: webapp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - webapp-network

  # 日志收集 (可选)
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.0
    container_name: webapp-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
    networks:
      - webapp-network

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# 网络配置
networks:
  webapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 